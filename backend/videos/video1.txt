Functions
0:00
hey there how's it going everybody in
0:01
this video we'll be learning about
0:03
functions now functions are basically
0:05
some instructions packaged together that
0:07
perform a specific task so let's create
0:10
our first function and see why these are
0:11
so beneficial Now to create a function
0:14
we'll use the defa keyword which I
0:16
believe stands for definition and let's
0:18
just make a simple function here to get
0:20
started I'll call this hello Funk now we
0:23
have parentheses there because that is
0:25
where our parameters will go when we add
0:27
those in but we don't have any
0:28
parameters just yet so that will be
0:31
empty for now now it is possible to
0:33
write a function and not have any code
0:35
in it but we can't leave it completely
0:37
blank uh but if we want to fill this
0:40
function in later then we can use this
Pass keyword
0:43
pass keyword and basically that pass
0:45
keyword is saying that we don't want to
0:47
do anything with this for now but it
0:48
won't throw any errors for leaving it
0:50
blank so if we want to run our function
0:54
then we can just say hello Funk and put
0:57
in these parentheses and we need to add
1:00
those parentheses after the function in
1:01
order to execute it if we don't have
1:04
those parentheses there then it'll be
1:06
equal to the function itself um so let's
1:09
actually see what that looks like so I'm
1:11
going to print out that hello function
1:14
without the parentheses in place uh
1:16
which means that we're not executing the
1:18
function so let me run that and we can
1:20
see when we printed that out that it
1:22
prints out that this is a function in a
1:24
certain location in memory but it didn't
1:27
execute the function so to execute it
1:29
then we add in these parentheses so now
1:32
if I run this then now it just gives us
1:35
none because we're not doing anything
1:37
with this function yet and it doesn't
1:39
have a return value so let's go ahead
1:41
and put some code into our function so
1:44
first we'll just put in a print
1:46
statement and we'll just print out some
1:49
text that says hello function with an
1:52
exclamation point and now that we're
1:54
actually running that print statement
1:55
from within the function we don't need
1:57
to print out that executed function we
2:01
can just execute that function and it
2:03
should run that print statement so we'll
2:05
run that so we can see that we executed
2:07
our function here it came within our
2:10
function and ran our print statement now
2:12
one benefit of functions is that they
2:14
allow us to reuse code without repeating
2:16
ourselves so let's say for example that
2:18
we had to print out some text in several
2:20
locations throughout our program so it
2:23
might look something like this so let me
2:25
copy this and I'll comment out our uh
2:27
function execution for now and I'm just
2:29
going to paste this in about four times
2:32
so now if we run this then as we expect
2:35
it prints out our four messages now
2:38
imagine our boss came to us and told us
2:40
that uh the text was a little bit off
2:42
and that we didn't want to have an
2:43
exclamation point at the end of the
2:45
string well the way that we have it now
2:48
we'd have to come in here and change all
2:50
of those manually so I'd come in and
2:52
change all these man messages to have a
2:55
period instead now that was only four
2:57
changes to make there but in some instan
3:00
that can be in hundreds of locations in
3:02
multiple different files so that's the
3:04
first benefit of functions it allows us
3:07
to put code with a specific purpose into
3:09
a single location so instead of printing
3:12
those four statements uh what we can
3:15
instead do is run our function four
3:18
times so I will remove that and
3:20
uncomment our function and we're going
3:22
to execute this four different times so
3:25
now if we run that then we can see that
3:28
it ran our function four times and
3:30
executed our print statement four
3:31
different times but now if our boss came
3:33
to us and asked us to remove that
3:35
exclamation point then it doesn't matter
3:37
if this is spread out over a 100
3:39
different lines or 100 different
3:41
locations we can just update it in this
3:43
one spot so I can change this to a
3:46
period and now if we run this then we
3:48
can see that those changes are seen
3:50
everywhere that the function is called
3:52
now this is called keeping your code dry
3:55
which stands for don't repeat yourself
3:58
it's a common mistake for people new to
4:00
programming to repeat the same things
4:01
throughout their code when really they
4:03
could either put their code into certain
4:05
variables or functions so that it's in a
4:08
single location so we saw earlier that
4:11
since we aren't returning anything from
4:13
our function uh it was actually equal to
4:15
none so what does it mean for uh our
4:19
function to return something now this is
4:21
where functions become really powerful
4:23
because it allows us to operate on some
4:25
data and then pass the result to
4:27
whatever called our function so instead
4:29
of of printing this string hello
4:31
function within here let's instead
4:34
return this okay so what does this mean
Executing functions
4:36
exactly this means that when we execute
4:38
our function it's actually going to be
4:40
equal to our return value so these
4:43
executed functions here are actually
4:45
equal to the string hello function so
4:48
right now if we run this then it doesn't
4:51
give us any results because it's just a
4:53
string that we're not doing anything
4:55
with but if instead we print this so me
5:00
print that executed function and if we
5:03
run that then we can see that it prints
5:05
out our string so basically think of a
5:08
function as a machine that takes input
5:11
and produces a result when you execute a
5:14
function you can think of it almost like
5:16
a black box you don't need to know
5:18
exactly how it's doing what it's doing
5:20
you're mainly concerned about the input
5:22
and the return value so in this simple
5:24
example here we don't have any input and
5:27
we can see that the return value is a
5:29
string
5:30
um now don't get me wrong it's useful to
5:32
know what a function is doing but when
5:34
you're first getting started don't get
5:35
caught up on understanding every detail
5:38
of what every function does just focus
5:41
on the input and what's returned so for
5:44
example when we call the Len function on
5:47
a string so if I print out Len of this
5:51
string test if I run this then as we saw
5:55
in a previous video this just returns an
5:57
integer that is the number of of
5:59
characters in our string so we have no
6:02
idea what the code that produces that
6:04
result looks like but we do know that we
6:07
passed in a string and that it returned
6:09
this integer and we'll see why here in a
6:11
bit why looking at functions in this way
6:14
will help you become better when working
6:16
with python because we can treat the
6:18
return value just like the data type
6:21
that it is and understanding this will
6:23
allow you to chain together some
6:24
functionality so we know our hello
6:27
function returns a string so we can
6:30
treat that executed function just like a
6:32
string so if we remember back to our
6:34
string Methods remember that we can
6:36
uppercase a string with uper so really
6:40
we can take this executed function and
6:42
just chain uper onto the end of it so
6:46
now if we run this now we can see that
6:49
our executed function returned the
6:51
string hello function and then we were
6:53
able to use the string method upper on
6:56
that returned value to uppercase the
6:58
string um okay so now let's look at how
7:01
we can pass arguments to our function
7:04
and real quick I'm going to remove that
7:07
uper method so to be able to pass
7:09
arguments to our function we'll need to
7:11
create some parameters here within our
7:13
parentheses so let's say that we wanted
7:16
to customize the greeting that our
7:18
function returns so let's create a uh a
7:21
parameter called greeting and now within
7:24
our function we'll return a string where
7:26
we use that greeting instead of of our
7:30
uh hello text that we had before so now
7:33
I'll just pass this in with a DOT format
7:36
so now before we run this we have to
7:38
pass in that greeting argument when we
7:41
execute our function if we don't then
7:43
we'll get an error so actually let's go
7:45
ahead and run this and see this error so
7:48
we can see that when we ran that it says
7:50
that hello Funk is missing one required
7:54
positional argument greeting so let's
7:56
pass in that greeting argument to our
7:58
hello function and to do that we can
8:01
just pass it in directly here when we
8:03
call our function so I'm just going to
8:05
pass in uh high as our string so now if
8:09
we run this then we can see that when we
8:11
passed in that string High into our
8:13
function that it set that greeing
8:16
variable equal to the string high and
8:19
then returned the string High function
8:22
now this greeding variable doesn't
8:24
affect any variables outside of the
8:26
function its scope is only local to
8:29
theun function which is nice because we
8:31
don't have to worry about it affecting
8:33
anything we don't want it to affect so
8:36
and if you want to learn more about
8:38
python scope then I do have a detailed
8:40
video going in depth as to how that
8:42
works exactly and I'll leave a link to
8:44
that video in the description section
8:46
below okay so right now this greeting
8:48
parameter is a required argument and
8:51
that is because it doesn't have a
8:53
default value now if we had a default
8:55
value then it would just fall back to
8:57
the default value whenever we didn't
8:59
pass that argument in so let's see an
9:02
example of this so let's say that we
9:05
also want to be able to pass a name to
9:07
our hello function and it'll return a
9:09
greeting and the name so we can add that
9:13
to our parameters by putting in a comma
9:16
here and saying that we also want to
9:18
accept this name parameter but let's say
9:21
that if no name is passed in then we
9:23
want to have a default value of U so we
9:26
can just say name is equal to U and now
9:30
let's add that to our return string so
9:33
I'll put in a comma space and then
9:36
another placeholder and we'll pass in
9:39
that name so what this is going to do is
9:41
it'll return a greeting and a name
9:43
separated by a comma and a space so if
9:46
we run this then we can see that even
9:49
though we didn't pass in a value for the
9:51
name argument when we executed this
9:53
function it didn't throw an error and
9:55
instead Ed the default value that we
9:58
specified as U but if we want to pass in
10:01
a value then it will use that value
10:03
instead so when we execute this function
10:07
if I was to say name is equal to and
10:10
we'll say Corey and run that then now we
Positional keyword arguments
10:12
can see that printed out the greeting
10:14
with the name that we passed in um now
10:17
your required positional arguments have
10:19
to come before your keyword arguments
10:22
now if you try to create a function with
10:24
those out of order then it's going to
10:26
give you an error now this is a little
10:28
more advanced topic topic that tripped a
10:30
lot of people up but at some point
10:32
you'll probably run across a function in
10:34
Python uh that looks something like this
10:37
so I'll say def student info and you
10:41
might see something where you see this
10:43
star args and star star quars and so let
10:48
me just go ahead and within this new
10:50
function here I will print out args and
10:54
I'll also print out quars so let's not
10:57
really worry about this function name
10:58
for now it's the arguments that I want
11:00
to focus on so seeing this star args and
11:04
star star quars can seem confusing at
11:06
first but basically all it's doing is
11:09
allowing us to accept an arbitrary
11:12
number of positional or keyword
11:14
arguments so for example let's say that
11:16
this student info function takes
11:19
positional arguments that represent the
11:21
classes that the student is taking plus
11:24
the keyword arguments passed in will be
11:26
random information about the student so
11:29
so you can see in both of those examples
11:31
we don't know how many of these
11:33
positional or keyword arguments there
11:35
will be and that's why we use star args
11:38
and star star quars and the names don't
11:41
have to be args and quars but that's a
11:44
convention that you'll see a lot so it's
11:46
always good to stick with convention so
11:48
that people can understand your code so
11:50
let's call this function with some
11:52
random values so I'm going to say
11:54
student info and first we want to pass
11:57
in some positional arguments of the
11:59
classes that they're taking so we'll say
12:01
math and art and now for our keyword
12:04
arguments we'll pass in some random
12:06
information about the student so we'll
12:09
say name is equal to John and age is
12:12
equal to 22 so now if we run this then
12:16
we can see that when we printed the args
12:19
it's actually a tupal with all of our
12:22
positional arguments and our quars are a
12:26
dictionary with all of our keyword
12:29
values so once you have that tupal and
12:31
that dictionary then you'll be able to
12:32
do whatever you want with that
12:34
information now sometimes you might see
12:36
a function call with arguments using the
12:39
star or double star now when it's used
12:42
in that context it will actually unpack
12:44
a sequence or dictionary and pass those
12:47
values into the function individually so
12:50
to see what I mean let's make a list in
12:52
a dictionary of everything that we just
12:54
passed into our function and just to
12:56
clear up some room here I'm going to go
12:58
ahead and delete the hello function that
13:00
we started off with so now I'm going to
13:03
create a list called courses and I'm
13:06
going to set this equal to math and art
13:09
that we passed in before and instead of
13:11
a tupal I'm going to make that a list so
13:13
now for the student info I'm going to
13:16
create a dictionary called info and set
13:19
that equal to those values so now let me
13:22
get rid of our positional and keyword
13:24
arguments here so let's say that we
13:26
wanted to pass all of these courses in
13:29
as our positional arguments and the info
13:32
dictionary as our keyword arguments so
13:35
if we just pass these in as is and I
13:37
passed in courses and info now if we run
13:41
this then we can see that this might not
13:44
be exactly what we thought instead of
13:46
passing the values in individually and
13:49
instead passed in the complete list and
13:52
the complete dictionary as positional
13:54
arguments so if we use the single star
13:57
in front of our list and the double star
14:00
in front of our dictionary then it will
14:02
actually unpack these values and pass
14:04
them in individually so basically it
14:06
will be the equivalent to our previous
14:09
execution uh where we pass them in
14:11
individually so to see what I mean let's
14:13
add a star in front of this courses to
14:16
unpack those values and a star star in
14:20
front of our dictionary to unpack those
14:23
keyword values so now if we run this and
14:26
we can see that we got what we had
14:27
before um we can see that when our
14:30
function prints args it's the values
14:32
from our list that we unpacked and our
14:35
quars is equal to the dictionary values
14:37
that we unpacked now I know that's a
14:39
little confusing especially to you know
14:41
get the idea that whenever you're
14:43
passing these in that it unpacks the
14:45
values and within here it's for
14:47
accepting an arbitrary number of
14:49
positional or keyword values but uh it's
14:52
a little more advanced of a topic and I
14:55
know it's confusing but hopefully it
14:57
makes some sense and you'll be able to
14:58
better understand understand what's
14:59
going on if you ever run into something
15:01
like that okay so lastly I wanted to run
Example
15:04
through an example that ties together
15:06
everything we've learned so far in this
15:07
series of videos so I have some code
15:10
here in my Snippets file that I'm going
15:12
to grab real quick and paste into the
15:15
file that we've been working with so now
15:18
let me lower this output a little bit so
15:20
that we can see everything here now
15:22
these are actually a couple of functions
15:23
that I grabbed in the python standard
15:25
Library I modified them very slightly
15:27
but it's basically the same and I wanted
15:29
to show that even though we've only gone
15:31
over the fundamentals we're already able
15:33
to look at some code from within the
15:35
standard Library itself and understand
15:37
what's going on so at the top here we
15:39
have a list called month days and this
15:42
has the number of days in each month now
15:45
the first index here is just a
15:47
placeholder that's not going to get used
15:49
um we're only going to be accessing
15:51
indexes one through 12 since those are
15:54
the months and then we have a function
15:56
here called is Leap which determines if
15:59
a year is a leap year it takes a single
16:01
argument that is the year that it's
16:03
checking and we can see that there's
16:05
this string um after the function
16:08
definition with three quotes and this is
16:11
called a dock string and dock strings
16:13
help document what a function or a class
16:16
is supposed to do so it's a good
16:18
practice anytime you write a function to
16:20
write a doc string that goes along with
16:21
it explaining what that function is
16:23
supposed to do now this part here can
16:26
seem a little intimidating but it's not
16:28
important that you understand how a leap
16:30
year is calculated there's not a lot of
16:32
people who know that off the top of
16:33
their head um but for various reasons
16:35
this is how a leap year is calculated
16:37
and it's not important but you could
16:39
probably figure out what this uh
16:41
conditional is doing so we're saying
16:43
that if the year is divisible by four
16:46
and uh it's not divisible by 100 or it's
16:51
divisible by 400 so like I was saying
16:53
there's a lot of different reasons why
16:55
uh leap years are determined this way
16:58
and if you don't know that that's
16:59
completely fine but this function here
17:01
is going to return true if a year is a
17:03
leap year and false if it's a non-leap
17:05
year and down here we have a days and
17:08
month function that takes a year and a
17:11
month as arguments and it'll return the
17:13
number of days in that month so if we
17:17
look at how this function works we can
17:18
see that it first checks if a month is
17:21
between one and 12 and if it's not then
17:25
it returns that it's an invalid month
17:27
and then it checks if the month that
17:29
we're working with is the second month
17:31
which would mean that it's February and
17:33
is a leap year using our function up
17:36
here at the top then it returns 29 if
17:39
both of those are true and lastly if it
17:42
makes it to the end without having
17:43
returned anything yet then it will index
17:46
into our month days and list up here at
17:49
the top and return the value of our
17:52
month so let's just run through this one
17:54
time and see how these functions work so
17:57
outside of both of the functions we're
18:00
going to go ahead and first use this is
18:03
Leap Year function so we'll say is Leap
18:06
2017 so if we run this then it returns
18:10
false so we ran this function is Leap
18:13
passed in 2017 as our value and it went
18:16
through this complicated conditional
18:17
here and determined that that was false
18:20
but if we type in 2020 here and run that
18:24
then we can see that it returns true
18:26
that 2020 is a leap year but now let's
18:29
try our days and month function which is
18:32
going to be a little bit longer of a
18:34
walkthrough so we'll say days and month
18:37
and we'll pass in a year so it takes a
18:40
year first we'll pass in a year of 2017
18:43
and we'll pass in a month of two which
18:46
is February now since 2017 is not a leap
18:49
year then this second month which is
18:52
February should only have 28 days so if
18:55
we run this then we can see that we got
18:57
28 so let's walk through exactly what
18:59
happened just so we're sure that we
19:01
understand so we executed our days and
19:04
month function with our arguments of
19:06
2017 for the year and two for the month
19:09
so it comes in uh to our days and month
19:12
function and it sets this year variable
19:15
equal to 2017 and this month variable
19:18
equal to two so let's comment those here
19:22
just to keep track of them through our
19:24
walkthr so I'll put a comment for year
19:27
as 2017 and a comment for month as two
19:31
so first it checks if our month is not
Outro
19:35
between 1 and 12 our month is two so it
19:39
is in that range so it doesn't meet this
19:41
conditional and since it doesn't meet
19:43
that conditional then we just continue
19:45
on so our next conditional asks if the
19:48
month is equal to two and is a leap year
19:51
so our month is equal to two but this is
19:55
Leap function runs through its code with
19:57
the year 200 17 and returns false so
20:01
since is Leap is false and we're using
20:04
an and operator then the whole
20:06
conditional evaluates to false so we
20:08
move on and lastly it accesses the month
20:12
days list at this month index and
20:16
remember that our month is equal to two
20:19
so it's accessing the second index and
20:22
if we look up here to our month day list
20:25
and go to our second index so 0 one two
20:29
then we can see that that's equal to 28
20:32
so it should be returning 28 here and
20:35
finally when we printed out that result
20:37
28 is what we got as our result now I
20:40
know that was kind of a long walkthrough
20:42
but I thought it might be useful to see
20:44
how these things actually work together
20:46
and how do you go about determining what
20:48
a function should return based on the
20:50
arguments that you pass in okay so I
20:52
think that is going to do it for this
20:53
video I hope that now you have a clear
20:55
understanding of how functions work how
20:57
we return values and the different ways
20:59
that we can pass arguments in the next
21:02
video we'll be learning how to import
21:04
modules and also learn about some of the
21:06
useful modules that come in the standard
21:08
library but if anyone has any questions
21:10
about what we covered in this video then
21:12
feel free to ask in the comment section
21:14
below and I'll do my best to answer
21:15
those and if you enjoy these tutorials
21:17
and would like to support them then
21:18
there are several ways you can do that
21:20
the easiest way is to Simply like the
21:21
video and give it a thumbs up and also
21:23
it's a huge help to share these videos
21:25
with anyone who you think would find
21:26
them useful and if you have the means
21:28
you can contribute through patreon and
21:29
there's a link to that page in the
21:30
description section below be sure to
21:32
subscribe for future videos and thank
21:34
you all for watching

